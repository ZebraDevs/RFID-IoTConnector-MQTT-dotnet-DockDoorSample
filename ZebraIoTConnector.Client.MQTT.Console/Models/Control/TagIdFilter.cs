/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Represents filter on the tag id.
    /// </summary>
    [DataContract]
    public partial class TagIdFilter : IEquatable<TagIdFilter>
    { 
        /// <summary>
        /// The value to match.
        /// </summary>
        /// <value>The value to match.</value>
        [Required]

        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// The segment or method of the id to match.
        /// </summary>
        /// <value>The segment or method of the id to match.</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MatchEnum
        {
            /// <summary>
            /// Enum PrefixEnum for prefix
            /// </summary>
            [EnumMember(Value = "prefix")]
            PrefixEnum = 0,
            /// <summary>
            /// Enum SuffixEnum for suffix
            /// </summary>
            [EnumMember(Value = "suffix")]
            SuffixEnum = 1,
            /// <summary>
            /// Enum RegexEnum for regex
            /// </summary>
            [EnumMember(Value = "regex")]
            RegexEnum = 2        }

        /// <summary>
        /// The segment or method of the id to match.
        /// </summary>
        /// <value>The segment or method of the id to match.</value>
        [Required]

        [DataMember(Name="match")]
        public MatchEnum? Match { get; set; }

        /// <summary>
        /// The filter operation (include/exclude).
        /// </summary>
        /// <value>The filter operation (include/exclude).</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OperationEnum
        {
            /// <summary>
            /// Enum IncludeEnum for include
            /// </summary>
            [EnumMember(Value = "include")]
            IncludeEnum = 0,
            /// <summary>
            /// Enum ExcludeEnum for exclude
            /// </summary>
            [EnumMember(Value = "exclude")]
            ExcludeEnum = 1        }

        /// <summary>
        /// The filter operation (include/exclude).
        /// </summary>
        /// <value>The filter operation (include/exclude).</value>
        [Required]

        [DataMember(Name="operation")]
        public OperationEnum? Operation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TagIdFilter {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Match: ").Append(Match).Append("\n");
            sb.Append("  Operation: ").Append(Operation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TagIdFilter)obj);
        }

        /// <summary>
        /// Returns true if TagIdFilter instances are equal
        /// </summary>
        /// <param name="other">Instance of TagIdFilter to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TagIdFilter other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Match == other.Match ||
                    Match != null &&
                    Match.Equals(other.Match)
                ) && 
                (
                    Operation == other.Operation ||
                    Operation != null &&
                    Operation.Equals(other.Operation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Match != null)
                    hashCode = hashCode * 59 + Match.GetHashCode();
                    if (Operation != null)
                    hashCode = hashCode * 59 + Operation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TagIdFilter left, TagIdFilter right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TagIdFilter left, TagIdFilter right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

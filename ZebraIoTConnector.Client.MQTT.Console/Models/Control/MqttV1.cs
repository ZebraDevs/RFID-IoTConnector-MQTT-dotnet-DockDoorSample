/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Configuration of MQTT
    /// </summary>
    [DataContract]
    public partial class MqttV1 : IEquatable<MqttV1>
    { 
        /// <summary>
        /// Gets or Sets Endpoint
        /// </summary>
        [Required]

        [DataMember(Name="endpoint")]
        public MqttEndpointV1 Endpoint { get; set; }

        /// <summary>
        /// Enable or Disable Security for MQTT connection
        /// </summary>
        /// <value>Enable or Disable Security for MQTT connection</value>
        [Required]

        [DataMember(Name="enableSecurity")]
        public bool? EnableSecurity { get; set; }

        /// <summary>
        /// Gets or Sets Security
        /// </summary>

        [DataMember(Name="security")]
        public MqttSecurityV1 Security { get; set; }

        /// <summary>
        /// Gets or Sets BasicAuthentication
        /// </summary>

        [DataMember(Name="basicAuthentication")]
        public BasicAuthenticationV1 BasicAuthentication { get; set; }

        /// <summary>
        /// Gets or Sets Additional
        /// </summary>
        [Required]

        [DataMember(Name="additional")]
        public MqttAdditionalOptionsV1 Additional { get; set; }

        /// <summary>
        /// Topic to which to publish messages
        /// </summary>
        /// <value>Topic to which to publish messages</value>
        [Required]

        [DataMember(Name="publishTopic")]
        public List<string> PublishTopic { get; set; }

        /// <summary>
        /// Topic to which to subscribe for messages
        /// </summary>
        /// <value>Topic to which to subscribe for messages</value>

        [DataMember(Name="subscribeTopic")]
        public List<string> SubscribeTopic { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MqttV1 {\n");
            sb.Append("  Endpoint: ").Append(Endpoint).Append("\n");
            sb.Append("  EnableSecurity: ").Append(EnableSecurity).Append("\n");
            sb.Append("  Security: ").Append(Security).Append("\n");
            sb.Append("  BasicAuthentication: ").Append(BasicAuthentication).Append("\n");
            sb.Append("  Additional: ").Append(Additional).Append("\n");
            sb.Append("  PublishTopic: ").Append(PublishTopic).Append("\n");
            sb.Append("  SubscribeTopic: ").Append(SubscribeTopic).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MqttV1)obj);
        }

        /// <summary>
        /// Returns true if MqttV1 instances are equal
        /// </summary>
        /// <param name="other">Instance of MqttV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MqttV1 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Endpoint == other.Endpoint ||
                    Endpoint != null &&
                    Endpoint.Equals(other.Endpoint)
                ) && 
                (
                    EnableSecurity == other.EnableSecurity ||
                    EnableSecurity != null &&
                    EnableSecurity.Equals(other.EnableSecurity)
                ) && 
                (
                    Security == other.Security ||
                    Security != null &&
                    Security.Equals(other.Security)
                ) && 
                (
                    BasicAuthentication == other.BasicAuthentication ||
                    BasicAuthentication != null &&
                    BasicAuthentication.Equals(other.BasicAuthentication)
                ) && 
                (
                    Additional == other.Additional ||
                    Additional != null &&
                    Additional.Equals(other.Additional)
                ) && 
                (
                    PublishTopic == other.PublishTopic ||
                    PublishTopic != null &&
                    PublishTopic.SequenceEqual(other.PublishTopic)
                ) && 
                (
                    SubscribeTopic == other.SubscribeTopic ||
                    SubscribeTopic != null &&
                    SubscribeTopic.SequenceEqual(other.SubscribeTopic)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Endpoint != null)
                    hashCode = hashCode * 59 + Endpoint.GetHashCode();
                    if (EnableSecurity != null)
                    hashCode = hashCode * 59 + EnableSecurity.GetHashCode();
                    if (Security != null)
                    hashCode = hashCode * 59 + Security.GetHashCode();
                    if (BasicAuthentication != null)
                    hashCode = hashCode * 59 + BasicAuthentication.GetHashCode();
                    if (Additional != null)
                    hashCode = hashCode * 59 + Additional.GetHashCode();
                    if (PublishTopic != null)
                    hashCode = hashCode * 59 + PublishTopic.GetHashCode();
                    if (SubscribeTopic != null)
                    hashCode = hashCode * 59 + SubscribeTopic.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MqttV1 left, MqttV1 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MqttV1 left, MqttV1 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

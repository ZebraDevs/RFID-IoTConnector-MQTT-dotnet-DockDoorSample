/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// current revertback firmware details
    /// </summary>
    [DataContract]
    public partial class GetVersionResponseRevertBackFirmware : IEquatable<GetVersionResponseRevertBackFirmware>
    { 
        /// <summary>
        /// revertback firmware version
        /// </summary>
        /// <value>revertback firmware version</value>
        [Required]

        [DataMember(Name="readerApplication")]
        public string ReaderApplication { get; set; }

        /// <summary>
        /// revertback boot loader version
        /// </summary>
        /// <value>revertback boot loader version</value>
        [Required]

        [DataMember(Name="readerBootLoader")]
        public string ReaderBootLoader { get; set; }

        /// <summary>
        /// revertback file system version
        /// </summary>
        /// <value>revertback file system version</value>
        [Required]

        [DataMember(Name="readerFileSystem")]
        public string ReaderFileSystem { get; set; }

        /// <summary>
        /// revertback os version
        /// </summary>
        /// <value>revertback os version</value>
        [Required]

        [DataMember(Name="readerOS")]
        public string ReaderOS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetVersionResponseRevertBackFirmware {\n");
            sb.Append("  ReaderApplication: ").Append(ReaderApplication).Append("\n");
            sb.Append("  ReaderBootLoader: ").Append(ReaderBootLoader).Append("\n");
            sb.Append("  ReaderFileSystem: ").Append(ReaderFileSystem).Append("\n");
            sb.Append("  ReaderOS: ").Append(ReaderOS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetVersionResponseRevertBackFirmware)obj);
        }

        /// <summary>
        /// Returns true if GetVersionResponseRevertBackFirmware instances are equal
        /// </summary>
        /// <param name="other">Instance of GetVersionResponseRevertBackFirmware to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetVersionResponseRevertBackFirmware other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReaderApplication == other.ReaderApplication ||
                    ReaderApplication != null &&
                    ReaderApplication.Equals(other.ReaderApplication)
                ) && 
                (
                    ReaderBootLoader == other.ReaderBootLoader ||
                    ReaderBootLoader != null &&
                    ReaderBootLoader.Equals(other.ReaderBootLoader)
                ) && 
                (
                    ReaderFileSystem == other.ReaderFileSystem ||
                    ReaderFileSystem != null &&
                    ReaderFileSystem.Equals(other.ReaderFileSystem)
                ) && 
                (
                    ReaderOS == other.ReaderOS ||
                    ReaderOS != null &&
                    ReaderOS.Equals(other.ReaderOS)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReaderApplication != null)
                    hashCode = hashCode * 59 + ReaderApplication.GetHashCode();
                    if (ReaderBootLoader != null)
                    hashCode = hashCode * 59 + ReaderBootLoader.GetHashCode();
                    if (ReaderFileSystem != null)
                    hashCode = hashCode * 59 + ReaderFileSystem.GetHashCode();
                    if (ReaderOS != null)
                    hashCode = hashCode * 59 + ReaderOS.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetVersionResponseRevertBackFirmware left, GetVersionResponseRevertBackFirmware right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetVersionResponseRevertBackFirmware left, GetVersionResponseRevertBackFirmware right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

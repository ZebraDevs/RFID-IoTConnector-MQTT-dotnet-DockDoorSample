/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Retrieves reader operational statistics for read points
    /// </summary>
    [DataContract]
    public partial class GetStatusResponse : IEquatable<GetStatusResponse>
    { 
        /// <summary>
        /// Duration the reader has been powered on
        /// </summary>
        /// <value>Duration the reader has been powered on</value>
        [Required]

        [DataMember(Name="uptime")]
        public string Uptime { get; set; }

        /// <summary>
        /// ISO 8601 formatted time on the reader
        /// </summary>
        /// <value>ISO 8601 formatted time on the reader</value>
        [Required]

        [DataMember(Name="systemTime")]
        public DateTime? SystemTime { get; set; }

        /// <summary>
        /// Gets or Sets Ram
        /// </summary>
        [Required]

        [DataMember(Name="ram")]
        public MemoryStats Ram { get; set; }

        /// <summary>
        /// Gets or Sets Flash
        /// </summary>
        [Required]

        [DataMember(Name="flash")]
        public ReaderFlashMemory Flash { get; set; }

        /// <summary>
        /// Gets or Sets Cpu
        /// </summary>
        [Required]

        [DataMember(Name="cpu")]
        public CpuStats Cpu { get; set; }

        /// <summary>
        /// The status of the radio connection
        /// </summary>
        /// <value>The status of the radio connection</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RadioConnectionEnum
        {
            /// <summary>
            /// Enum ConnectedEnum for connected
            /// </summary>
            [EnumMember(Value = "connected")]
            ConnectedEnum = 0,
            /// <summary>
            /// Enum DisconnectedEnum for disconnected
            /// </summary>
            [EnumMember(Value = "disconnected")]
            DisconnectedEnum = 1        }

        /// <summary>
        /// The status of the radio connection
        /// </summary>
        /// <value>The status of the radio connection</value>
        [Required]

        [DataMember(Name="radioConnection")]
        public RadioConnectionEnum? RadioConnection { get; set; }

        /// <summary>
        /// Gets or Sets Antennas
        /// </summary>
        [Required]

        [DataMember(Name="antennas")]
        public GetStatusResponseAntennas Antennas { get; set; }

        /// <summary>
        /// Current Reader Temperature (in degrees centigrade)
        /// </summary>
        /// <value>Current Reader Temperature (in degrees centigrade)</value>
        [Required]

        [DataMember(Name="temperature")]
        public int? Temperature { get; set; }

        /// <summary>
        /// Status of the radio activity
        /// </summary>
        /// <value>Status of the radio activity</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RadioActivitiyEnum
        {
            /// <summary>
            /// Enum ActiveEnum for active
            /// </summary>
            [EnumMember(Value = "active")]
            ActiveEnum = 0,
            /// <summary>
            /// Enum InactiveEnum for inactive
            /// </summary>
            [EnumMember(Value = "inactive")]
            InactiveEnum = 1        }

        /// <summary>
        /// Status of the radio activity
        /// </summary>
        /// <value>Status of the radio activity</value>
        [Required]

        [DataMember(Name="radioActivitiy")]
        public RadioActivitiyEnum? RadioActivitiy { get; set; }

        /// <summary>
        /// The source of power for the reader
        /// </summary>
        /// <value>The source of power for the reader</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PowerSourceEnum
        {
            /// <summary>
            /// Enum DCEnum for DC
            /// </summary>
            [EnumMember(Value = "DC")]
            DCEnum = 0,
            /// <summary>
            /// Enum POEEnum for POE
            /// </summary>
            [EnumMember(Value = "POE")]
            POEEnum = 1,
            /// <summary>
            /// Enum POEEnum_2 for POE+
            /// </summary>
            [EnumMember(Value = "POE+")]
            POEEnum_2 = 2        }

        /// <summary>
        /// The source of power for the reader
        /// </summary>
        /// <value>The source of power for the reader</value>
        [Required]

        [DataMember(Name="powerSource")]
        public PowerSourceEnum? PowerSource { get; set; }

        /// <summary>
        /// How the power supplied to the reader is negotiated Only present if powerSource is POE or POE+
        /// </summary>
        /// <value>How the power supplied to the reader is negotiated Only present if powerSource is POE or POE+</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PowerNegotiationEnum
        {
            /// <summary>
            /// Enum DisabledEnum for disabled
            /// </summary>
            [EnumMember(Value = "disabled")]
            DisabledEnum = 0,
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 1,
            /// <summary>
            /// Enum SuccessEnum for success
            /// </summary>
            [EnumMember(Value = "success")]
            SuccessEnum = 2,
            /// <summary>
            /// Enum FailureEnum for failure
            /// </summary>
            [EnumMember(Value = "failure")]
            FailureEnum = 3,
            /// <summary>
            /// Enum NotApplicableEnum for not_applicable
            /// </summary>
            [EnumMember(Value = "not_applicable")]
            NotApplicableEnum = 4        }

        /// <summary>
        /// How the power supplied to the reader is negotiated Only present if powerSource is POE or POE+
        /// </summary>
        /// <value>How the power supplied to the reader is negotiated Only present if powerSource is POE or POE+</value>
        [Required]

        [DataMember(Name="powerNegotiation")]
        public PowerNegotiationEnum? PowerNegotiation { get; set; }

        /// <summary>
        /// Gets or Sets Ntp
        /// </summary>
        [Required]

        [DataMember(Name="ntp")]
        public OneOfgetStatusResponseNtp Ntp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetStatusResponse {\n");
            sb.Append("  Uptime: ").Append(Uptime).Append("\n");
            sb.Append("  SystemTime: ").Append(SystemTime).Append("\n");
            sb.Append("  Ram: ").Append(Ram).Append("\n");
            sb.Append("  Flash: ").Append(Flash).Append("\n");
            sb.Append("  Cpu: ").Append(Cpu).Append("\n");
            sb.Append("  RadioConnection: ").Append(RadioConnection).Append("\n");
            sb.Append("  Antennas: ").Append(Antennas).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  RadioActivitiy: ").Append(RadioActivitiy).Append("\n");
            sb.Append("  PowerSource: ").Append(PowerSource).Append("\n");
            sb.Append("  PowerNegotiation: ").Append(PowerNegotiation).Append("\n");
            sb.Append("  Ntp: ").Append(Ntp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetStatusResponse)obj);
        }

        /// <summary>
        /// Returns true if GetStatusResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GetStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetStatusResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Uptime == other.Uptime ||
                    Uptime != null &&
                    Uptime.Equals(other.Uptime)
                ) && 
                (
                    SystemTime == other.SystemTime ||
                    SystemTime != null &&
                    SystemTime.Equals(other.SystemTime)
                ) && 
                (
                    Ram == other.Ram ||
                    Ram != null &&
                    Ram.Equals(other.Ram)
                ) && 
                (
                    Flash == other.Flash ||
                    Flash != null &&
                    Flash.Equals(other.Flash)
                ) && 
                (
                    Cpu == other.Cpu ||
                    Cpu != null &&
                    Cpu.Equals(other.Cpu)
                ) && 
                (
                    RadioConnection == other.RadioConnection ||
                    RadioConnection != null &&
                    RadioConnection.Equals(other.RadioConnection)
                ) && 
                (
                    Antennas == other.Antennas ||
                    Antennas != null &&
                    Antennas.Equals(other.Antennas)
                ) && 
                (
                    Temperature == other.Temperature ||
                    Temperature != null &&
                    Temperature.Equals(other.Temperature)
                ) && 
                (
                    RadioActivitiy == other.RadioActivitiy ||
                    RadioActivitiy != null &&
                    RadioActivitiy.Equals(other.RadioActivitiy)
                ) && 
                (
                    PowerSource == other.PowerSource ||
                    PowerSource != null &&
                    PowerSource.Equals(other.PowerSource)
                ) && 
                (
                    PowerNegotiation == other.PowerNegotiation ||
                    PowerNegotiation != null &&
                    PowerNegotiation.Equals(other.PowerNegotiation)
                ) && 
                (
                    Ntp == other.Ntp ||
                    Ntp != null &&
                    Ntp.Equals(other.Ntp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Uptime != null)
                    hashCode = hashCode * 59 + Uptime.GetHashCode();
                    if (SystemTime != null)
                    hashCode = hashCode * 59 + SystemTime.GetHashCode();
                    if (Ram != null)
                    hashCode = hashCode * 59 + Ram.GetHashCode();
                    if (Flash != null)
                    hashCode = hashCode * 59 + Flash.GetHashCode();
                    if (Cpu != null)
                    hashCode = hashCode * 59 + Cpu.GetHashCode();
                    if (RadioConnection != null)
                    hashCode = hashCode * 59 + RadioConnection.GetHashCode();
                    if (Antennas != null)
                    hashCode = hashCode * 59 + Antennas.GetHashCode();
                    if (Temperature != null)
                    hashCode = hashCode * 59 + Temperature.GetHashCode();
                    if (RadioActivitiy != null)
                    hashCode = hashCode * 59 + RadioActivitiy.GetHashCode();
                    if (PowerSource != null)
                    hashCode = hashCode * 59 + PowerSource.GetHashCode();
                    if (PowerNegotiation != null)
                    hashCode = hashCode * 59 + PowerNegotiation.GetHashCode();
                    if (Ntp != null)
                    hashCode = hashCode * 59 + Ntp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetStatusResponse left, GetStatusResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetStatusResponse left, GetStatusResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

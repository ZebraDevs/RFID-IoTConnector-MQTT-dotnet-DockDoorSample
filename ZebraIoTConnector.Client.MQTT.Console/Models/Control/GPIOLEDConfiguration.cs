/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// GPIO-LED module configuration  Configure GPO and LED behaviour based on Events generated  Supported Events: 1. GPI_1_L: event raised when GPI 1 changed from HIGH to LOW 2. GPI_1_H: event raised when GPI 1 changed from LOW to HIGH 3. GPI_2_L: event raised when GPI 2 changed from HIGH to LOW 4. GPI_2_H: event raised when GPI 2 changed from LOW to HIGH 5. CLOUD_DISCONNECT: event raised when reader is disconnected from cloud 6. CLOUD_CONNECT: event raised when reader is connected to cloud 7. TAG_READ: event raised when a tag is read 8. RADIO_START: event raised when inventory operation started using START API 9. RADIO_STOP: event raised when inventory operation stopped using STOP API
    /// </summary>
    [DataContract]
    public partial class GPIOLEDConfiguration : IEquatable<GPIOLEDConfiguration>
    { 
        /// <summary>
        /// Gets or Sets GPODefaults
        /// </summary>

        [DataMember(Name="GPODefaults")]
        public GPIOLEDConfigurationGPODefaults GPODefaults { get; set; }

        /// <summary>
        /// Gets or Sets LEDDefaults
        /// </summary>

        [DataMember(Name="LEDDefaults")]
        public GPIOLEDConfigurationLEDDefaults LEDDefaults { get; set; }

        /// <summary>
        /// Array of GPO or LED actions. Actions will be performed sequentially.
        /// </summary>
        /// <value>Array of GPO or LED actions. Actions will be performed sequentially.</value>

        [DataMember(Name="GPI_1_H")]
        public List<AnyOfGPIOLEDConfigurationGPI1HItems> GPI1H { get; set; }

        /// <summary>
        /// Array of GPO or LED actions. Actions will be performed sequentially.
        /// </summary>
        /// <value>Array of GPO or LED actions. Actions will be performed sequentially.</value>

        [DataMember(Name="GPI_1_L")]
        public List<AnyOfGPIOLEDConfigurationGPI1LItems> GPI1L { get; set; }

        /// <summary>
        /// Array of GPO or LED actions. Actions will be performed sequentially.
        /// </summary>
        /// <value>Array of GPO or LED actions. Actions will be performed sequentially.</value>

        [DataMember(Name="GPI_2_H")]
        public List<AnyOfGPIOLEDConfigurationGPI2HItems> GPI2H { get; set; }

        /// <summary>
        /// Array of GPO or LED actions. Actions will be performed sequentially.
        /// </summary>
        /// <value>Array of GPO or LED actions. Actions will be performed sequentially.</value>

        [DataMember(Name="GPI_2_L")]
        public List<AnyOfGPIOLEDConfigurationGPI2LItems> GPI2L { get; set; }

        /// <summary>
        /// Array of GPO or LED actions. Actions will be performed sequentially.
        /// </summary>
        /// <value>Array of GPO or LED actions. Actions will be performed sequentially.</value>

        [DataMember(Name="CLOUD_DISCONNECT")]
        public List<AnyOfGPIOLEDConfigurationCLOUDDISCONNECTItems> CLOUD_DISCONNECT { get; set; }

        /// <summary>
        /// Array of GPO or LED actions. Actions will be performed sequentially.
        /// </summary>
        /// <value>Array of GPO or LED actions. Actions will be performed sequentially.</value>

        [DataMember(Name="CLOUD_CONNECT")]
        public List<AnyOfGPIOLEDConfigurationCLOUDCONNECTItems> CLOUD_CONNECT { get; set; }

        /// <summary>
        /// Array of GPO or LED actions. Actions will be performed sequentially.
        /// </summary>
        /// <value>Array of GPO or LED actions. Actions will be performed sequentially.</value>

        [DataMember(Name="TAG_READ")]
        public List<AnyOfGPIOLEDConfigurationTAGREADItems> TAG_READ { get; set; }

        /// <summary>
        /// Array of GPO or LED actions. Actions will be performed sequentially.
        /// </summary>
        /// <value>Array of GPO or LED actions. Actions will be performed sequentially.</value>

        [DataMember(Name="RADIO_START")]
        public List<AnyOfGPIOLEDConfigurationRADIOSTARTItems> RADIO_START { get; set; }

        /// <summary>
        /// Array of GPO or LED actions. Actions will be performed sequentially.
        /// </summary>
        /// <value>Array of GPO or LED actions. Actions will be performed sequentially.</value>

        [DataMember(Name="RADIO_STOP")]
        public List<AnyOfGPIOLEDConfigurationRADIOSTOPItems> RADIO_STOP { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GPIOLEDConfiguration {\n");
            sb.Append("  GPODefaults: ").Append(GPODefaults).Append("\n");
            sb.Append("  LEDDefaults: ").Append(LEDDefaults).Append("\n");
            sb.Append("  GPI1H: ").Append(GPI1H).Append("\n");
            sb.Append("  GPI1L: ").Append(GPI1L).Append("\n");
            sb.Append("  GPI2H: ").Append(GPI2H).Append("\n");
            sb.Append("  GPI2L: ").Append(GPI2L).Append("\n");
            sb.Append("  CLOUD_DISCONNECT: ").Append(CLOUD_DISCONNECT).Append("\n");
            sb.Append("  CLOUD_CONNECT: ").Append(CLOUD_CONNECT).Append("\n");
            sb.Append("  TAG_READ: ").Append(TAG_READ).Append("\n");
            sb.Append("  RADIO_START: ").Append(RADIO_START).Append("\n");
            sb.Append("  RADIO_STOP: ").Append(RADIO_STOP).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GPIOLEDConfiguration)obj);
        }

        /// <summary>
        /// Returns true if GPIOLEDConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of GPIOLEDConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GPIOLEDConfiguration other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    GPODefaults == other.GPODefaults ||
                    GPODefaults != null &&
                    GPODefaults.Equals(other.GPODefaults)
                ) && 
                (
                    LEDDefaults == other.LEDDefaults ||
                    LEDDefaults != null &&
                    LEDDefaults.Equals(other.LEDDefaults)
                ) && 
                (
                    GPI1H == other.GPI1H ||
                    GPI1H != null &&
                    GPI1H.SequenceEqual(other.GPI1H)
                ) && 
                (
                    GPI1L == other.GPI1L ||
                    GPI1L != null &&
                    GPI1L.SequenceEqual(other.GPI1L)
                ) && 
                (
                    GPI2H == other.GPI2H ||
                    GPI2H != null &&
                    GPI2H.SequenceEqual(other.GPI2H)
                ) && 
                (
                    GPI2L == other.GPI2L ||
                    GPI2L != null &&
                    GPI2L.SequenceEqual(other.GPI2L)
                ) && 
                (
                    CLOUD_DISCONNECT == other.CLOUD_DISCONNECT ||
                    CLOUD_DISCONNECT != null &&
                    CLOUD_DISCONNECT.SequenceEqual(other.CLOUD_DISCONNECT)
                ) && 
                (
                    CLOUD_CONNECT == other.CLOUD_CONNECT ||
                    CLOUD_CONNECT != null &&
                    CLOUD_CONNECT.SequenceEqual(other.CLOUD_CONNECT)
                ) && 
                (
                    TAG_READ == other.TAG_READ ||
                    TAG_READ != null &&
                    TAG_READ.SequenceEqual(other.TAG_READ)
                ) && 
                (
                    RADIO_START == other.RADIO_START ||
                    RADIO_START != null &&
                    RADIO_START.SequenceEqual(other.RADIO_START)
                ) && 
                (
                    RADIO_STOP == other.RADIO_STOP ||
                    RADIO_STOP != null &&
                    RADIO_STOP.SequenceEqual(other.RADIO_STOP)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (GPODefaults != null)
                    hashCode = hashCode * 59 + GPODefaults.GetHashCode();
                    if (LEDDefaults != null)
                    hashCode = hashCode * 59 + LEDDefaults.GetHashCode();
                    if (GPI1H != null)
                    hashCode = hashCode * 59 + GPI1H.GetHashCode();
                    if (GPI1L != null)
                    hashCode = hashCode * 59 + GPI1L.GetHashCode();
                    if (GPI2H != null)
                    hashCode = hashCode * 59 + GPI2H.GetHashCode();
                    if (GPI2L != null)
                    hashCode = hashCode * 59 + GPI2L.GetHashCode();
                    if (CLOUD_DISCONNECT != null)
                    hashCode = hashCode * 59 + CLOUD_DISCONNECT.GetHashCode();
                    if (CLOUD_CONNECT != null)
                    hashCode = hashCode * 59 + CLOUD_CONNECT.GetHashCode();
                    if (TAG_READ != null)
                    hashCode = hashCode * 59 + TAG_READ.GetHashCode();
                    if (RADIO_START != null)
                    hashCode = hashCode * 59 + RADIO_START.GetHashCode();
                    if (RADIO_STOP != null)
                    hashCode = hashCode * 59 + RADIO_STOP.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GPIOLEDConfiguration left, GPIOLEDConfiguration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GPIOLEDConfiguration left, GPIOLEDConfiguration right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Tag Data Events Retention Configuration on connection lost
    /// </summary>
    [DataContract]
    public partial class DataV1Retention : IEquatable<DataV1Retention>
    { 
        /// <summary>
        /// Rate (in events per second) to report data events when network is reconnected
        /// </summary>
        /// <value>Rate (in events per second) to report data events when network is reconnected</value>

        [Range(1, 500)]
        [DataMember(Name="throttle")]
        public int? Throttle { get; set; }

        /// <summary>
        /// Maximum number of events to retain
        /// </summary>
        /// <value>Maximum number of events to retain</value>

        [Range(1, 150000)]
        [DataMember(Name="maxNumEvents")]
        public int? MaxNumEvents { get; set; }

        /// <summary>
        /// Maximum event retention time (in minutes)  0 or -1 indicate Events will be retained Forever  Example: 10 indicate Events generated in last 10 minutes will be retained
        /// </summary>
        /// <value>Maximum event retention time (in minutes)  0 or -1 indicate Events will be retained Forever  Example: 10 indicate Events generated in last 10 minutes will be retained</value>

        [DataMember(Name="maxEventRetentionTimeInMin")]
        public int? MaxEventRetentionTimeInMin { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataV1Retention {\n");
            sb.Append("  Throttle: ").Append(Throttle).Append("\n");
            sb.Append("  MaxNumEvents: ").Append(MaxNumEvents).Append("\n");
            sb.Append("  MaxEventRetentionTimeInMin: ").Append(MaxEventRetentionTimeInMin).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DataV1Retention)obj);
        }

        /// <summary>
        /// Returns true if DataV1Retention instances are equal
        /// </summary>
        /// <param name="other">Instance of DataV1Retention to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataV1Retention other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Throttle == other.Throttle ||
                    Throttle != null &&
                    Throttle.Equals(other.Throttle)
                ) && 
                (
                    MaxNumEvents == other.MaxNumEvents ||
                    MaxNumEvents != null &&
                    MaxNumEvents.Equals(other.MaxNumEvents)
                ) && 
                (
                    MaxEventRetentionTimeInMin == other.MaxEventRetentionTimeInMin ||
                    MaxEventRetentionTimeInMin != null &&
                    MaxEventRetentionTimeInMin.Equals(other.MaxEventRetentionTimeInMin)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Throttle != null)
                    hashCode = hashCode * 59 + Throttle.GetHashCode();
                    if (MaxNumEvents != null)
                    hashCode = hashCode * 59 + MaxNumEvents.GetHashCode();
                    if (MaxEventRetentionTimeInMin != null)
                    hashCode = hashCode * 59 + MaxEventRetentionTimeInMin.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DataV1Retention left, DataV1Retention right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DataV1Retention left, DataV1Retention right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

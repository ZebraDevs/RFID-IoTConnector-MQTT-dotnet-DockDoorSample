/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Install certificate
    /// </summary>
    [DataContract]
    public partial class InstallCertificateCommand : IEquatable<InstallCertificateCommand>
    { 
        /// <summary>
        /// name of certificate
        /// </summary>
        /// <value>name of certificate</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// certificate type
        /// </summary>
        /// <value>certificate type</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ServerEnum for server
            /// </summary>
            [EnumMember(Value = "server")]
            ServerEnum = 0,
            /// <summary>
            /// Enum ClientEnum for client
            /// </summary>
            [EnumMember(Value = "client")]
            ClientEnum = 1,
            /// <summary>
            /// Enum AppEnum for app
            /// </summary>
            [EnumMember(Value = "app")]
            AppEnum = 2        }

        /// <summary>
        /// certificate type
        /// </summary>
        /// <value>certificate type</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// ftps server url hosting certificate pfx file
        /// </summary>
        /// <value>ftps server url hosting certificate pfx file</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="url")]
        public string Url { get; set; }

        /// <summary>
        /// ftps server authentication type
        /// </summary>
        /// <value>ftps server authentication type</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AuthenticationTypeEnum
        {
            /// <summary>
            /// Enum NONEEnum for NONE
            /// </summary>
            [EnumMember(Value = "NONE")]
            NONEEnum = 0,
            /// <summary>
            /// Enum BASICEnum for BASIC
            /// </summary>
            [EnumMember(Value = "BASIC")]
            BASICEnum = 1        }

        /// <summary>
        /// ftps server authentication type
        /// </summary>
        /// <value>ftps server authentication type</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="authenticationType")]
        public AuthenticationTypeEnum? AuthenticationType { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationOptions
        /// </summary>
        [Required]

        [DataMember(Name="authenticationOptions")]
        public InstallCertificateCommandAuthenticationOptions AuthenticationOptions { get; set; }

        /// <summary>
        /// PFX certiifcates file password
        /// </summary>
        /// <value>PFX certiifcates file password</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="pfxPassword")]
        public string PfxPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallCertificateCommand {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  AuthenticationType: ").Append(AuthenticationType).Append("\n");
            sb.Append("  AuthenticationOptions: ").Append(AuthenticationOptions).Append("\n");
            sb.Append("  PfxPassword: ").Append(PfxPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InstallCertificateCommand)obj);
        }

        /// <summary>
        /// Returns true if InstallCertificateCommand instances are equal
        /// </summary>
        /// <param name="other">Instance of InstallCertificateCommand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallCertificateCommand other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    AuthenticationType == other.AuthenticationType ||
                    AuthenticationType != null &&
                    AuthenticationType.Equals(other.AuthenticationType)
                ) && 
                (
                    AuthenticationOptions == other.AuthenticationOptions ||
                    AuthenticationOptions != null &&
                    AuthenticationOptions.Equals(other.AuthenticationOptions)
                ) && 
                (
                    PfxPassword == other.PfxPassword ||
                    PfxPassword != null &&
                    PfxPassword.Equals(other.PfxPassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (AuthenticationType != null)
                    hashCode = hashCode * 59 + AuthenticationType.GetHashCode();
                    if (AuthenticationOptions != null)
                    hashCode = hashCode * 59 + AuthenticationOptions.GetHashCode();
                    if (PfxPassword != null)
                    hashCode = hashCode * 59 + PfxPassword.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InstallCertificateCommand left, InstallCertificateCommand right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InstallCertificateCommand left, InstallCertificateCommand right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

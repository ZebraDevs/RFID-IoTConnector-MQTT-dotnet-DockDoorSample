/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Configuration of Additional MQTT Options
    /// </summary>
    [DataContract]
    public partial class MqttAdditionalOptionsV1 : IEquatable<MqttAdditionalOptionsV1>
    { 
        /// <summary>
        /// The duration (in seconds) to buffer messages when the connection to MQTT is lost
        /// </summary>
        /// <value>The duration (in seconds) to buffer messages when the connection to MQTT is lost</value>
        [Required]

        [DataMember(Name="keepAlive")]
        public int? KeepAlive { get; set; }

        /// <summary>
        /// Enables or Disables cleaning session of connection to MQTT
        /// </summary>
        /// <value>Enables or Disables cleaning session of connection to MQTT</value>
        [Required]

        [DataMember(Name="cleanSession")]
        public bool? CleanSession { get; set; }

        /// <summary>
        /// Enables or Disables logging of MQTT Debug messages
        /// </summary>
        /// <value>Enables or Disables logging of MQTT Debug messages</value>
        [Required]

        [DataMember(Name="debug")]
        public bool? Debug { get; set; }

        /// <summary>
        /// The period to attempt reconnection when MQTT connection is lost (in seconds)
        /// </summary>
        /// <value>The period to attempt reconnection when MQTT connection is lost (in seconds)</value>
        [Required]

        [DataMember(Name="reconnectDelay")]
        public int? ReconnectDelay { get; set; }

        /// <summary>
        /// Maximum amount of time (in seconds) to attempt to reconnect after MQTT connection is lost (0 indicates continuing to try \&quot;forever\&quot;)
        /// </summary>
        /// <value>Maximum amount of time (in seconds) to attempt to reconnect after MQTT connection is lost (0 indicates continuing to try \&quot;forever\&quot;)</value>
        [Required]

        [DataMember(Name="reconnectDelayMax")]
        public int? ReconnectDelayMax { get; set; }

        /// <summary>
        /// Identifier for the MQTT client
        /// </summary>
        /// <value>Identifier for the MQTT client</value>
        [Required]

        [DataMember(Name="clientId")]
        public string ClientId { get; set; }

        /// <summary>
        /// Sets the Quality of Service for the MQTT Connection
        /// </summary>
        /// <value>Sets the Quality of Service for the MQTT Connection</value>
        [Required]

        [Range(0, 2)]
        [DataMember(Name="qos")]
        public int? Qos { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MqttAdditionalOptionsV1 {\n");
            sb.Append("  KeepAlive: ").Append(KeepAlive).Append("\n");
            sb.Append("  CleanSession: ").Append(CleanSession).Append("\n");
            sb.Append("  Debug: ").Append(Debug).Append("\n");
            sb.Append("  ReconnectDelay: ").Append(ReconnectDelay).Append("\n");
            sb.Append("  ReconnectDelayMax: ").Append(ReconnectDelayMax).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  Qos: ").Append(Qos).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MqttAdditionalOptionsV1)obj);
        }

        /// <summary>
        /// Returns true if MqttAdditionalOptionsV1 instances are equal
        /// </summary>
        /// <param name="other">Instance of MqttAdditionalOptionsV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MqttAdditionalOptionsV1 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    KeepAlive == other.KeepAlive ||
                    KeepAlive != null &&
                    KeepAlive.Equals(other.KeepAlive)
                ) && 
                (
                    CleanSession == other.CleanSession ||
                    CleanSession != null &&
                    CleanSession.Equals(other.CleanSession)
                ) && 
                (
                    Debug == other.Debug ||
                    Debug != null &&
                    Debug.Equals(other.Debug)
                ) && 
                (
                    ReconnectDelay == other.ReconnectDelay ||
                    ReconnectDelay != null &&
                    ReconnectDelay.Equals(other.ReconnectDelay)
                ) && 
                (
                    ReconnectDelayMax == other.ReconnectDelayMax ||
                    ReconnectDelayMax != null &&
                    ReconnectDelayMax.Equals(other.ReconnectDelayMax)
                ) && 
                (
                    ClientId == other.ClientId ||
                    ClientId != null &&
                    ClientId.Equals(other.ClientId)
                ) && 
                (
                    Qos == other.Qos ||
                    Qos != null &&
                    Qos.Equals(other.Qos)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (KeepAlive != null)
                    hashCode = hashCode * 59 + KeepAlive.GetHashCode();
                    if (CleanSession != null)
                    hashCode = hashCode * 59 + CleanSession.GetHashCode();
                    if (Debug != null)
                    hashCode = hashCode * 59 + Debug.GetHashCode();
                    if (ReconnectDelay != null)
                    hashCode = hashCode * 59 + ReconnectDelay.GetHashCode();
                    if (ReconnectDelayMax != null)
                    hashCode = hashCode * 59 + ReconnectDelayMax.GetHashCode();
                    if (ClientId != null)
                    hashCode = hashCode * 59 + ClientId.GetHashCode();
                    if (Qos != null)
                    hashCode = hashCode * 59 + Qos.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MqttAdditionalOptionsV1 left, MqttAdditionalOptionsV1 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MqttAdditionalOptionsV1 left, MqttAdditionalOptionsV1 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Controls when an ongoing operation completes.   If this element is absent (or empty), the radio will continue trying to inventory tags until a \&quot;stop\&quot; is issued.
    /// </summary>
    [DataContract]
    public partial class RadioStopConditions : IEquatable<RadioStopConditions>
    { 
        /// <summary>
        /// Time to run until radio stops (in seconds)
        /// </summary>
        /// <value>Time to run until radio stops (in seconds)</value>

        [DataMember(Name="duration")]
        public int? Duration { get; set; }

        /// <summary>
        /// The number of cycles through all enabled antennas before stopping the radio
        /// </summary>
        /// <value>The number of cycles through all enabled antennas before stopping the radio</value>

        [DataMember(Name="antennaCycles")]
        public int? AntennaCycles { get; set; }

        /// <summary>
        /// The number of tags to inventory until the radio stops. Cannot be set at the same time as durationAfterNoMoreUniqueTags
        /// </summary>
        /// <value>The number of tags to inventory until the radio stops. Cannot be set at the same time as durationAfterNoMoreUniqueTags</value>

        [DataMember(Name="tagCount")]
        public int? TagCount { get; set; }

        /// <summary>
        /// Duration (in seconds) after not inventorying any more unique tags to stop the radio. Cannot be set at the same time as tagCount
        /// </summary>
        /// <value>Duration (in seconds) after not inventorying any more unique tags to stop the radio. Cannot be set at the same time as tagCount</value>

        [DataMember(Name="durationAfterNoMoreUniqueTags")]
        public int? DurationAfterNoMoreUniqueTags { get; set; }

        /// <summary>
        /// Gets or Sets Gpis
        /// </summary>

        [DataMember(Name="gpis")]
        public List<Gpi> Gpis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadioStopConditions {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  AntennaCycles: ").Append(AntennaCycles).Append("\n");
            sb.Append("  TagCount: ").Append(TagCount).Append("\n");
            sb.Append("  DurationAfterNoMoreUniqueTags: ").Append(DurationAfterNoMoreUniqueTags).Append("\n");
            sb.Append("  Gpis: ").Append(Gpis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RadioStopConditions)obj);
        }

        /// <summary>
        /// Returns true if RadioStopConditions instances are equal
        /// </summary>
        /// <param name="other">Instance of RadioStopConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadioStopConditions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) && 
                (
                    AntennaCycles == other.AntennaCycles ||
                    AntennaCycles != null &&
                    AntennaCycles.Equals(other.AntennaCycles)
                ) && 
                (
                    TagCount == other.TagCount ||
                    TagCount != null &&
                    TagCount.Equals(other.TagCount)
                ) && 
                (
                    DurationAfterNoMoreUniqueTags == other.DurationAfterNoMoreUniqueTags ||
                    DurationAfterNoMoreUniqueTags != null &&
                    DurationAfterNoMoreUniqueTags.Equals(other.DurationAfterNoMoreUniqueTags)
                ) && 
                (
                    Gpis == other.Gpis ||
                    Gpis != null &&
                    Gpis.SequenceEqual(other.Gpis)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                    if (AntennaCycles != null)
                    hashCode = hashCode * 59 + AntennaCycles.GetHashCode();
                    if (TagCount != null)
                    hashCode = hashCode * 59 + TagCount.GetHashCode();
                    if (DurationAfterNoMoreUniqueTags != null)
                    hashCode = hashCode * 59 + DurationAfterNoMoreUniqueTags.GetHashCode();
                    if (Gpis != null)
                    hashCode = hashCode * 59 + Gpis.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RadioStopConditions left, RadioStopConditions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RadioStopConditions left, RadioStopConditions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

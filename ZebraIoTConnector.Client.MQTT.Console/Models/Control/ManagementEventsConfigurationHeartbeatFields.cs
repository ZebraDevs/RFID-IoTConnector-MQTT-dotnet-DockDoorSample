/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// heartbeat fields
    /// </summary>
    [DataContract]
    public partial class ManagementEventsConfigurationHeartbeatFields : IEquatable<ManagementEventsConfigurationHeartbeatFields>
    { 
        /// <summary>
        /// Gets or Sets RadioControl
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RadioControlEnum
        {
            /// <summary>
            /// Enum ANTENNASEnum for ANTENNAS
            /// </summary>
            [EnumMember(Value = "ANTENNAS")]
            ANTENNASEnum = 0,
            /// <summary>
            /// Enum RADIOACTIVITYEnum for RADIO_ACTIVITY
            /// </summary>
            [EnumMember(Value = "RADIO_ACTIVITY")]
            RADIOACTIVITYEnum = 1,
            /// <summary>
            /// Enum RADIOCONNECTIONEnum for RADIO_CONNECTION
            /// </summary>
            [EnumMember(Value = "RADIO_CONNECTION")]
            RADIOCONNECTIONEnum = 2,
            /// <summary>
            /// Enum CPUEnum for CPU
            /// </summary>
            [EnumMember(Value = "CPU")]
            CPUEnum = 3,
            /// <summary>
            /// Enum RAMEnum for RAM
            /// </summary>
            [EnumMember(Value = "RAM")]
            RAMEnum = 4,
            /// <summary>
            /// Enum UPTIMEEnum for UPTIME
            /// </summary>
            [EnumMember(Value = "UPTIME")]
            UPTIMEEnum = 5,
            /// <summary>
            /// Enum NUMERRORSEnum for NUM_ERRORS
            /// </summary>
            [EnumMember(Value = "NUM_ERRORS")]
            NUMERRORSEnum = 6,
            /// <summary>
            /// Enum NUMWARNINGSEnum for NUM_WARNINGS
            /// </summary>
            [EnumMember(Value = "NUM_WARNINGS")]
            NUMWARNINGSEnum = 7,
            /// <summary>
            /// Enum NUMTAGREADSEnum for NUM_TAG_READS
            /// </summary>
            [EnumMember(Value = "NUM_TAG_READS")]
            NUMTAGREADSEnum = 8,
            /// <summary>
            /// Enum NUMTAGREADSPERANTENNAEnum for NUM_TAG_READS_PER_ANTENNA
            /// </summary>
            [EnumMember(Value = "NUM_TAG_READS_PER_ANTENNA")]
            NUMTAGREADSPERANTENNAEnum = 9,
            /// <summary>
            /// Enum NUMDATAMESSAGESTXEDEnum for NUM_DATA_MESSAGES_TXED
            /// </summary>
            [EnumMember(Value = "NUM_DATA_MESSAGES_TXED")]
            NUMDATAMESSAGESTXEDEnum = 10,
            /// <summary>
            /// Enum NUMRADIOPACKETSRXEDEnum for NUM_RADIO_PACKETS_RXED
            /// </summary>
            [EnumMember(Value = "NUM_RADIO_PACKETS_RXED")]
            NUMRADIOPACKETSRXEDEnum = 11        }

        /// <summary>
        /// Radio Control related heartbeat events
        /// </summary>
        /// <value>Radio Control related heartbeat events</value>

        [DataMember(Name="radio_control")]
        public List<RadioControlEnum> RadioControl { get; set; }

        /// <summary>
        /// Gets or Sets ReaderGateway
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReaderGatewayEnum
        {
            /// <summary>
            /// Enum NUMDATAMESSAGESRXEDEnum for NUM_DATA_MESSAGES_RXED
            /// </summary>
            [EnumMember(Value = "NUM_DATA_MESSAGES_RXED")]
            NUMDATAMESSAGESRXEDEnum = 0,
            /// <summary>
            /// Enum NUMDATAMESSAGESTXEDEnum for NUM_DATA_MESSAGES_TXED
            /// </summary>
            [EnumMember(Value = "NUM_DATA_MESSAGES_TXED")]
            NUMDATAMESSAGESTXEDEnum = 1,
            /// <summary>
            /// Enum NUMDATAMESSAGESRETAINEDEnum for NUM_DATA_MESSAGES_RETAINED
            /// </summary>
            [EnumMember(Value = "NUM_DATA_MESSAGES_RETAINED")]
            NUMDATAMESSAGESRETAINEDEnum = 2,
            /// <summary>
            /// Enum NUMDATAMESSAGESDROPPEDEnum for NUM_DATA_MESSAGES_DROPPED
            /// </summary>
            [EnumMember(Value = "NUM_DATA_MESSAGES_DROPPED")]
            NUMDATAMESSAGESDROPPEDEnum = 3,
            /// <summary>
            /// Enum NUMMANAGEMENTEVENTSTXEDEnum for NUM_MANAGEMENT_EVENTS_TXED
            /// </summary>
            [EnumMember(Value = "NUM_MANAGEMENT_EVENTS_TXED")]
            NUMMANAGEMENTEVENTSTXEDEnum = 4,
            /// <summary>
            /// Enum CPUEnum for CPU
            /// </summary>
            [EnumMember(Value = "CPU")]
            CPUEnum = 5,
            /// <summary>
            /// Enum RAMEnum for RAM
            /// </summary>
            [EnumMember(Value = "RAM")]
            RAMEnum = 6,
            /// <summary>
            /// Enum UPTIMEEnum for UPTIME
            /// </summary>
            [EnumMember(Value = "UPTIME")]
            UPTIMEEnum = 7,
            /// <summary>
            /// Enum NUMERRORSEnum for NUM_ERRORS
            /// </summary>
            [EnumMember(Value = "NUM_ERRORS")]
            NUMERRORSEnum = 8,
            /// <summary>
            /// Enum NUMWARNINGSEnum for NUM_WARNINGS
            /// </summary>
            [EnumMember(Value = "NUM_WARNINGS")]
            NUMWARNINGSEnum = 9        }

        /// <summary>
        /// Gets or Sets ReaderGateway
        /// </summary>

        [DataMember(Name="reader_gateway")]
        public List<ReaderGatewayEnum> ReaderGateway { get; set; }

        /// <summary>
        /// Gets or Sets System
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SystemEnum
        {
            /// <summary>
            /// Enum CPUEnum for CPU
            /// </summary>
            [EnumMember(Value = "CPU")]
            CPUEnum = 0,
            /// <summary>
            /// Enum FLASHEnum for FLASH
            /// </summary>
            [EnumMember(Value = "FLASH")]
            FLASHEnum = 1,
            /// <summary>
            /// Enum NTPEnum for NTP
            /// </summary>
            [EnumMember(Value = "NTP")]
            NTPEnum = 2,
            /// <summary>
            /// Enum RAMEnum for RAM
            /// </summary>
            [EnumMember(Value = "RAM")]
            RAMEnum = 3,
            /// <summary>
            /// Enum SYSTEMTIMEEnum for SYSTEMTIME
            /// </summary>
            [EnumMember(Value = "SYSTEMTIME")]
            SYSTEMTIMEEnum = 4,
            /// <summary>
            /// Enum TEMPERATUREEnum for TEMPERATURE
            /// </summary>
            [EnumMember(Value = "TEMPERATURE")]
            TEMPERATUREEnum = 5,
            /// <summary>
            /// Enum UPTIMEEnum for UPTIME
            /// </summary>
            [EnumMember(Value = "UPTIME")]
            UPTIMEEnum = 6        }

        /// <summary>
        /// Gets or Sets System
        /// </summary>

        [DataMember(Name="system")]
        public List<SystemEnum> System { get; set; }

        /// <summary>
        /// Gets or Sets Userapps
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum UserappsEnum
        {
            /// <summary>
            /// Enum STATUSEnum for STATUS
            /// </summary>
            [EnumMember(Value = "STATUS")]
            STATUSEnum = 0,
            /// <summary>
            /// Enum CPUEnum for CPU
            /// </summary>
            [EnumMember(Value = "CPU")]
            CPUEnum = 1,
            /// <summary>
            /// Enum RAMEnum for RAM
            /// </summary>
            [EnumMember(Value = "RAM")]
            RAMEnum = 2,
            /// <summary>
            /// Enum UPTIMEEnum for UPTIME
            /// </summary>
            [EnumMember(Value = "UPTIME")]
            UPTIMEEnum = 3,
            /// <summary>
            /// Enum NUMDATAMESSAGESRXEDEnum for NUM_DATA_MESSAGES_RXED
            /// </summary>
            [EnumMember(Value = "NUM_DATA_MESSAGES_RXED")]
            NUMDATAMESSAGESRXEDEnum = 4,
            /// <summary>
            /// Enum NUMDATAMESSAGESTXEDEnum for NUM_DATA_MESSAGES_TXED
            /// </summary>
            [EnumMember(Value = "NUM_DATA_MESSAGES_TXED")]
            NUMDATAMESSAGESTXEDEnum = 5,
            /// <summary>
            /// Enum INCOMINGDATABUFFERPERCENTAGEREMAININGEnum for INCOMING_DATA_BUFFER_PERCENTAGE_REMAINING
            /// </summary>
            [EnumMember(Value = "INCOMING_DATA_BUFFER_PERCENTAGE_REMAINING")]
            INCOMINGDATABUFFERPERCENTAGEREMAININGEnum = 6,
            /// <summary>
            /// Enum OUTGOINGDATABUFFERPERCENTAGEREMAININGEnum for OUTGOING_DATA_BUFFER_PERCENTAGE_REMAINING
            /// </summary>
            [EnumMember(Value = "OUTGOING_DATA_BUFFER_PERCENTAGE_REMAINING")]
            OUTGOINGDATABUFFERPERCENTAGEREMAININGEnum = 7        }

        /// <summary>
        /// Gets or Sets Userapps
        /// </summary>

        [DataMember(Name="userapps")]
        public List<UserappsEnum> Userapps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ManagementEventsConfigurationHeartbeatFields {\n");
            sb.Append("  RadioControl: ").Append(RadioControl).Append("\n");
            sb.Append("  ReaderGateway: ").Append(ReaderGateway).Append("\n");
            sb.Append("  System: ").Append(System).Append("\n");
            sb.Append("  Userapps: ").Append(Userapps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ManagementEventsConfigurationHeartbeatFields)obj);
        }

        /// <summary>
        /// Returns true if ManagementEventsConfigurationHeartbeatFields instances are equal
        /// </summary>
        /// <param name="other">Instance of ManagementEventsConfigurationHeartbeatFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManagementEventsConfigurationHeartbeatFields other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RadioControl == other.RadioControl ||
                    RadioControl != null &&
                    RadioControl.SequenceEqual(other.RadioControl)
                ) && 
                (
                    ReaderGateway == other.ReaderGateway ||
                    ReaderGateway != null &&
                    ReaderGateway.SequenceEqual(other.ReaderGateway)
                ) && 
                (
                    System == other.System ||
                    System != null &&
                    System.SequenceEqual(other.System)
                ) && 
                (
                    Userapps == other.Userapps ||
                    Userapps != null &&
                    Userapps.SequenceEqual(other.Userapps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RadioControl != null)
                    hashCode = hashCode * 59 + RadioControl.GetHashCode();
                    if (ReaderGateway != null)
                    hashCode = hashCode * 59 + ReaderGateway.GetHashCode();
                    if (System != null)
                    hashCode = hashCode * 59 + System.GetHashCode();
                    if (Userapps != null)
                    hashCode = hashCode * 59 + Userapps.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ManagementEventsConfigurationHeartbeatFields left, ManagementEventsConfigurationHeartbeatFields right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ManagementEventsConfigurationHeartbeatFields left, ManagementEventsConfigurationHeartbeatFields right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

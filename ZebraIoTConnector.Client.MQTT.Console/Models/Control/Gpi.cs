/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Gpi : IEquatable<Gpi>
    { 
        /// <summary>
        /// GPI Port Number
        /// </summary>
        /// <value>GPI Port Number</value>
        [Required]

        [Range(1, 2)]
        [DataMember(Name="port")]
        public int? Port { get; set; }

        /// <summary>
        /// Transition to this GPI will trigger event
        /// </summary>
        /// <value>Transition to this GPI will trigger event</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SignalEnum
        {
            /// <summary>
            /// Enum HIGHEnum for HIGH
            /// </summary>
            [EnumMember(Value = "HIGH")]
            HIGHEnum = 0,
            /// <summary>
            /// Enum LOWEnum for LOW
            /// </summary>
            [EnumMember(Value = "LOW")]
            LOWEnum = 1        }

        /// <summary>
        /// Transition to this GPI will trigger event
        /// </summary>
        /// <value>Transition to this GPI will trigger event</value>
        [Required]

        [DataMember(Name="signal")]
        public SignalEnum? Signal { get; set; }

        /// <summary>
        /// Time (in milliseconds) until GPI must remain at signal level to trigger event
        /// </summary>
        /// <value>Time (in milliseconds) until GPI must remain at signal level to trigger event</value>

        [DataMember(Name="debounceTime")]
        public int? DebounceTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Gpi {\n");
            sb.Append("  Port: ").Append(Port).Append("\n");
            sb.Append("  Signal: ").Append(Signal).Append("\n");
            sb.Append("  DebounceTime: ").Append(DebounceTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Gpi)obj);
        }

        /// <summary>
        /// Returns true if Gpi instances are equal
        /// </summary>
        /// <param name="other">Instance of Gpi to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Gpi other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Port == other.Port ||
                    Port != null &&
                    Port.Equals(other.Port)
                ) && 
                (
                    Signal == other.Signal ||
                    Signal != null &&
                    Signal.Equals(other.Signal)
                ) && 
                (
                    DebounceTime == other.DebounceTime ||
                    DebounceTime != null &&
                    DebounceTime.Equals(other.DebounceTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Port != null)
                    hashCode = hashCode * 59 + Port.GetHashCode();
                    if (Signal != null)
                    hashCode = hashCode * 59 + Signal.GetHashCode();
                    if (DebounceTime != null)
                    hashCode = hashCode * 59 + DebounceTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Gpi left, Gpi right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Gpi left, Gpi right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

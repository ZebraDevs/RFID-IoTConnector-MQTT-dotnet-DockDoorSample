/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Controls when, after a “start” is issued, the radio starts trying to inventory tags.   If this element is absent, the radio will immediately begin inventorying tags upon a \&quot;start\&quot; command. 
    /// </summary>
    [DataContract]
    public partial class RadioStartConditions : IEquatable<RadioStartConditions>
    { 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum GPIEnum for GPI
            /// </summary>
            [EnumMember(Value = "GPI")]
            GPIEnum = 0,
            /// <summary>
            /// Enum GPIWITHRESTARTEnum for GPI_WITH_RESTART
            /// </summary>
            [EnumMember(Value = "GPI_WITH_RESTART")]
            GPIWITHRESTARTEnum = 1        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Gpis
        /// </summary>

        [DataMember(Name="gpis")]
        public List<Gpi> Gpis { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RadioStartConditions {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Gpis: ").Append(Gpis).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RadioStartConditions)obj);
        }

        /// <summary>
        /// Returns true if RadioStartConditions instances are equal
        /// </summary>
        /// <param name="other">Instance of RadioStartConditions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RadioStartConditions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Gpis == other.Gpis ||
                    Gpis != null &&
                    Gpis.SequenceEqual(other.Gpis)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Gpis != null)
                    hashCode = hashCode * 59 + Gpis.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RadioStartConditions left, RadioStartConditions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RadioStartConditions left, RadioStartConditions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

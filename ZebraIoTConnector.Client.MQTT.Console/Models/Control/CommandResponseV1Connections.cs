/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CommandResponseV1Connections : IEquatable<CommandResponseV1Connections>
    { 
        /// <summary>
        /// Type of Channel
        /// </summary>
        /// <value>Type of Channel</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum MqttEnum for mqtt
            /// </summary>
            [EnumMember(Value = "mqtt")]
            MqttEnum = 0,
            /// <summary>
            /// Enum MqttGCPEnum for mqtt-GCP
            /// </summary>
            [EnumMember(Value = "mqtt-GCP")]
            MqttGCPEnum = 1,
            /// <summary>
            /// Enum MqttAWSEnum for mqtt-AWS
            /// </summary>
            [EnumMember(Value = "mqtt-AWS")]
            MqttAWSEnum = 2,
            /// <summary>
            /// Enum MqttIBMEnum for mqtt-IBM
            /// </summary>
            [EnumMember(Value = "mqtt-IBM")]
            MqttIBMEnum = 3,
            /// <summary>
            /// Enum MqttAZUREEnum for mqtt-AZURE
            /// </summary>
            [EnumMember(Value = "mqtt-AZURE")]
            MqttAZUREEnum = 4        }

        /// <summary>
        /// Type of Channel
        /// </summary>
        /// <value>Type of Channel</value>
        [Required]

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>

        [DataMember(Name="options")]
        public MqttV1 Options { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommandResponseV1Connections {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CommandResponseV1Connections)obj);
        }

        /// <summary>
        /// Returns true if CommandResponseV1Connections instances are equal
        /// </summary>
        /// <param name="other">Instance of CommandResponseV1Connections to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommandResponseV1Connections other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Options == other.Options ||
                    Options != null &&
                    Options.Equals(other.Options)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CommandResponseV1Connections left, CommandResponseV1Connections right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CommandResponseV1Connections left, CommandResponseV1Connections right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

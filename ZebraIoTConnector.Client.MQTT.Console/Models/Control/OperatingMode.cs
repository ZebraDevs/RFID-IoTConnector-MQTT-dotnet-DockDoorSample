/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Represents the reader operating mode.
    /// </summary>
    [DataContract]
    public partial class OperatingMode : IEquatable<OperatingMode>
    { 
        /// <summary>
        /// The type of mode of operation 
        /// </summary>
        /// <value>The type of mode of operation </value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SIMPLEEnum for SIMPLE
            /// </summary>
            [EnumMember(Value = "SIMPLE")]
            SIMPLEEnum = 0,
            /// <summary>
            /// Enum INVENTORYEnum for INVENTORY
            /// </summary>
            [EnumMember(Value = "INVENTORY")]
            INVENTORYEnum = 1,
            /// <summary>
            /// Enum PORTALEnum for PORTAL
            /// </summary>
            [EnumMember(Value = "PORTAL")]
            PORTALEnum = 2,
            /// <summary>
            /// Enum CONVEYOREnum for CONVEYOR
            /// </summary>
            [EnumMember(Value = "CONVEYOR")]
            CONVEYOREnum = 3,
            /// <summary>
            /// Enum CUSTOMEnum for CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOMEnum = 4        }

        /// <summary>
        /// The type of mode of operation 
        /// </summary>
        /// <value>The type of mode of operation </value>
        [Required]

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets ModeSpecificSettings
        /// </summary>

        [DataMember(Name="modeSpecificSettings")]
        public OneOfoperatingModeModeSpecificSettings ModeSpecificSettings { get; set; }

        /// <summary>
        /// Gets or Sets Antennas
        /// </summary>

        [DataMember(Name="antennas")]
        public List<int?> Antennas { get; set; }

        /// <summary>
        /// Gets or Sets Filter
        /// </summary>

        [DataMember(Name="filter")]
        public TagIdFilter Filter { get; set; }

        /// <summary>
        /// Desired Transmit Power (in dbm)
        /// </summary>
        /// <value>Desired Transmit Power (in dbm)</value>

        [DataMember(Name="transmitPower")]
        public OneOfoperatingModeTransmitPower TransmitPower { get; set; }

        /// <summary>
        /// Link Profile (communication channel between tag and reader)
        /// </summary>
        /// <value>Link Profile (communication channel between tag and reader)</value>

        [DataMember(Name="linkProfile")]
        public OneOfoperatingModeLinkProfile LinkProfile { get; set; }

        /// <summary>
        /// Stop Condition for antennas
        /// </summary>
        /// <value>Stop Condition for antennas</value>

        [DataMember(Name="antennaStopCondition")]
        public OneOfoperatingModeAntennaStopCondition AntennaStopCondition { get; set; }

        /// <summary>
        /// Gets or Sets Query
        /// </summary>

        [DataMember(Name="query")]
        public OneOfoperatingModeQuery Query { get; set; }

        /// <summary>
        /// Gets or Sets TagMetaData
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TagMetaDataEnum
        {
            /// <summary>
            /// Enum RSSIEnum for RSSI
            /// </summary>
            [EnumMember(Value = "RSSI")]
            RSSIEnum = 0,
            /// <summary>
            /// Enum PHASEEnum for PHASE
            /// </summary>
            [EnumMember(Value = "PHASE")]
            PHASEEnum = 1,
            /// <summary>
            /// Enum SEENCOUNTEnum for SEEN_COUNT
            /// </summary>
            [EnumMember(Value = "SEEN_COUNT")]
            SEENCOUNTEnum = 2,
            /// <summary>
            /// Enum ANTENNAEnum for ANTENNA
            /// </summary>
            [EnumMember(Value = "ANTENNA")]
            ANTENNAEnum = 3,
            /// <summary>
            /// Enum CHANNELEnum for CHANNEL
            /// </summary>
            [EnumMember(Value = "CHANNEL")]
            CHANNELEnum = 4,
            /// <summary>
            /// Enum PCEnum for PC
            /// </summary>
            [EnumMember(Value = "PC")]
            PCEnum = 5,
            /// <summary>
            /// Enum XPCEnum for XPC
            /// </summary>
            [EnumMember(Value = "XPC")]
            XPCEnum = 6,
            /// <summary>
            /// Enum CRCEnum for CRC
            /// </summary>
            [EnumMember(Value = "CRC")]
            CRCEnum = 7        }

        /// <summary>
        /// Controls when and how often a tag is reported    “ANTENNA” will report the antenna port upon which the tag was inventoried.    “RSSI” will report the rssi (in dbm) of the inventoried tag. If the tag is only reported occasionally (see reportFilter), this tag will be the peak rssi since the last reported read.       \&quot;PHASE” will report the phase (in degrees) of the inventoried tag. This value will only be reported if each individual tag read is reported (in other words, if reportFilter duration is set to 0). Otherwise, it will not be reported.      \&quot;CHANNEL” will report the channel (in MHz) the reader was using when the tag was inventoried. This value will only be reported if each individual tag read is reported (in other words, if reportFilter duration is set to 0). Otherwise, it will not be reported.      “SEEN_COUNT” will report the number of times the tag has been inventoried since the previous report. This value will always be 1 if each individual tag read is reported (in other words, if reportFilter duration is set to 0).       \&quot;PC\&quot; will report the PC bits of the inventoried tag as a hex string.       \&quot;XPC\&quot; will report the XPC bits of the inventoried tag, if present, as a hex string.       \&quot;CRC\&quot; will report the CRC bits of the inventoried tag as a hex string.    By default, “SIMPLE” mode does not report any additional meta data, “PORTAL” and “CONVEYOR” modes reports “ANTENNA”, and “INVENTORY” mode reports “ANTENNA”, “RSSI”, and “SEEN_COUNT”. 
        /// </summary>
        /// <value>Controls when and how often a tag is reported    “ANTENNA” will report the antenna port upon which the tag was inventoried.    “RSSI” will report the rssi (in dbm) of the inventoried tag. If the tag is only reported occasionally (see reportFilter), this tag will be the peak rssi since the last reported read.       \&quot;PHASE” will report the phase (in degrees) of the inventoried tag. This value will only be reported if each individual tag read is reported (in other words, if reportFilter duration is set to 0). Otherwise, it will not be reported.      \&quot;CHANNEL” will report the channel (in MHz) the reader was using when the tag was inventoried. This value will only be reported if each individual tag read is reported (in other words, if reportFilter duration is set to 0). Otherwise, it will not be reported.      “SEEN_COUNT” will report the number of times the tag has been inventoried since the previous report. This value will always be 1 if each individual tag read is reported (in other words, if reportFilter duration is set to 0).       \&quot;PC\&quot; will report the PC bits of the inventoried tag as a hex string.       \&quot;XPC\&quot; will report the XPC bits of the inventoried tag, if present, as a hex string.       \&quot;CRC\&quot; will report the CRC bits of the inventoried tag as a hex string.    By default, “SIMPLE” mode does not report any additional meta data, “PORTAL” and “CONVEYOR” modes reports “ANTENNA”, and “INVENTORY” mode reports “ANTENNA”, “RSSI”, and “SEEN_COUNT”. </value>

        [DataMember(Name="tagMetaData")]
        public List<TagMetaDataEnum> TagMetaData { get; set; }

        /// <summary>
        /// Gets or Sets RadioStartConditions
        /// </summary>

        [DataMember(Name="radioStartConditions")]
        public RadioStartConditions RadioStartConditions { get; set; }

        /// <summary>
        /// Gets or Sets RadioStopConditions
        /// </summary>

        [DataMember(Name="radioStopConditions")]
        public RadioStopConditions RadioStopConditions { get; set; }

        /// <summary>
        /// Gets or Sets ReportFilter
        /// </summary>

        [DataMember(Name="reportFilter")]
        public ReportFilter ReportFilter { get; set; }

        /// <summary>
        /// Gets or Sets RssiFilter
        /// </summary>

        [DataMember(Name="rssiFilter")]
        public RssiFilter RssiFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OperatingMode {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  ModeSpecificSettings: ").Append(ModeSpecificSettings).Append("\n");
            sb.Append("  Antennas: ").Append(Antennas).Append("\n");
            sb.Append("  Filter: ").Append(Filter).Append("\n");
            sb.Append("  TransmitPower: ").Append(TransmitPower).Append("\n");
            sb.Append("  LinkProfile: ").Append(LinkProfile).Append("\n");
            sb.Append("  AntennaStopCondition: ").Append(AntennaStopCondition).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  TagMetaData: ").Append(TagMetaData).Append("\n");
            sb.Append("  RadioStartConditions: ").Append(RadioStartConditions).Append("\n");
            sb.Append("  RadioStopConditions: ").Append(RadioStopConditions).Append("\n");
            sb.Append("  ReportFilter: ").Append(ReportFilter).Append("\n");
            sb.Append("  RssiFilter: ").Append(RssiFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OperatingMode)obj);
        }

        /// <summary>
        /// Returns true if OperatingMode instances are equal
        /// </summary>
        /// <param name="other">Instance of OperatingMode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OperatingMode other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    ModeSpecificSettings == other.ModeSpecificSettings ||
                    ModeSpecificSettings != null &&
                    ModeSpecificSettings.Equals(other.ModeSpecificSettings)
                ) && 
                (
                    Antennas == other.Antennas ||
                    Antennas != null &&
                    Antennas.SequenceEqual(other.Antennas)
                ) && 
                (
                    Filter == other.Filter ||
                    Filter != null &&
                    Filter.Equals(other.Filter)
                ) && 
                (
                    TransmitPower == other.TransmitPower ||
                    TransmitPower != null &&
                    TransmitPower.Equals(other.TransmitPower)
                ) && 
                (
                    LinkProfile == other.LinkProfile ||
                    LinkProfile != null &&
                    LinkProfile.Equals(other.LinkProfile)
                ) && 
                (
                    AntennaStopCondition == other.AntennaStopCondition ||
                    AntennaStopCondition != null &&
                    AntennaStopCondition.Equals(other.AntennaStopCondition)
                ) && 
                (
                    Query == other.Query ||
                    Query != null &&
                    Query.Equals(other.Query)
                ) && 
                (
                    TagMetaData == other.TagMetaData ||
                    TagMetaData != null &&
                    TagMetaData.SequenceEqual(other.TagMetaData)
                ) && 
                (
                    RadioStartConditions == other.RadioStartConditions ||
                    RadioStartConditions != null &&
                    RadioStartConditions.Equals(other.RadioStartConditions)
                ) && 
                (
                    RadioStopConditions == other.RadioStopConditions ||
                    RadioStopConditions != null &&
                    RadioStopConditions.Equals(other.RadioStopConditions)
                ) && 
                (
                    ReportFilter == other.ReportFilter ||
                    ReportFilter != null &&
                    ReportFilter.Equals(other.ReportFilter)
                ) && 
                (
                    RssiFilter == other.RssiFilter ||
                    RssiFilter != null &&
                    RssiFilter.Equals(other.RssiFilter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (ModeSpecificSettings != null)
                    hashCode = hashCode * 59 + ModeSpecificSettings.GetHashCode();
                    if (Antennas != null)
                    hashCode = hashCode * 59 + Antennas.GetHashCode();
                    if (Filter != null)
                    hashCode = hashCode * 59 + Filter.GetHashCode();
                    if (TransmitPower != null)
                    hashCode = hashCode * 59 + TransmitPower.GetHashCode();
                    if (LinkProfile != null)
                    hashCode = hashCode * 59 + LinkProfile.GetHashCode();
                    if (AntennaStopCondition != null)
                    hashCode = hashCode * 59 + AntennaStopCondition.GetHashCode();
                    if (Query != null)
                    hashCode = hashCode * 59 + Query.GetHashCode();
                    if (TagMetaData != null)
                    hashCode = hashCode * 59 + TagMetaData.GetHashCode();
                    if (RadioStartConditions != null)
                    hashCode = hashCode * 59 + RadioStartConditions.GetHashCode();
                    if (RadioStopConditions != null)
                    hashCode = hashCode * 59 + RadioStopConditions.GetHashCode();
                    if (ReportFilter != null)
                    hashCode = hashCode * 59 + ReportFilter.GetHashCode();
                    if (RssiFilter != null)
                    hashCode = hashCode * 59 + RssiFilter.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OperatingMode left, OperatingMode right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OperatingMode left, OperatingMode right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

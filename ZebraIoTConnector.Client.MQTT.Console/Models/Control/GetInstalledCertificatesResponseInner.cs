/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// single certificate details
    /// </summary>
    [DataContract]
    public partial class GetInstalledCertificatesResponseInner : IEquatable<GetInstalledCertificatesResponseInner>
    { 
        /// <summary>
        /// certificate name
        /// </summary>
        /// <value>certificate name</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// certificate type
        /// </summary>
        /// <value>certificate type</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum ServerEnum for server
            /// </summary>
            [EnumMember(Value = "server")]
            ServerEnum = 0,
            /// <summary>
            /// Enum ClientEnum for client
            /// </summary>
            [EnumMember(Value = "client")]
            ClientEnum = 1,
            /// <summary>
            /// Enum AppEnum for app
            /// </summary>
            [EnumMember(Value = "app")]
            AppEnum = 2        }

        /// <summary>
        /// certificate type
        /// </summary>
        /// <value>certificate type</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// certificate installation time
        /// </summary>
        /// <value>certificate installation time</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="installTime")]
        public string InstallTime { get; set; }

        /// <summary>
        /// Certificate issuer name
        /// </summary>
        /// <value>Certificate issuer name</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="issuerName")]
        public string IssuerName { get; set; }

        /// <summary>
        /// public key content
        /// </summary>
        /// <value>public key content</value>
        [Required]

        [DataMember(Name="publickey")]
        public string Publickey { get; set; }

        /// <summary>
        /// certificate serial
        /// </summary>
        /// <value>certificate serial</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="serial")]
        public string Serial { get; set; }

        /// <summary>
        /// certificate subject name
        /// </summary>
        /// <value>certificate subject name</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="subjectName")]
        public string SubjectName { get; set; }

        /// <summary>
        /// certificate validity start date (DD/MM/YYYY)
        /// </summary>
        /// <value>certificate validity start date (DD/MM/YYYY)</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="validityStart")]
        public string ValidityStart { get; set; }

        /// <summary>
        /// certificate validity end date (DD/MM/YYYY)
        /// </summary>
        /// <value>certificate validity end date (DD/MM/YYYY)</value>
        [Required]

        [MinLength(1)]
        [DataMember(Name="validityEnd")]
        public string ValidityEnd { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetInstalledCertificatesResponseInner {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  InstallTime: ").Append(InstallTime).Append("\n");
            sb.Append("  IssuerName: ").Append(IssuerName).Append("\n");
            sb.Append("  Publickey: ").Append(Publickey).Append("\n");
            sb.Append("  Serial: ").Append(Serial).Append("\n");
            sb.Append("  SubjectName: ").Append(SubjectName).Append("\n");
            sb.Append("  ValidityStart: ").Append(ValidityStart).Append("\n");
            sb.Append("  ValidityEnd: ").Append(ValidityEnd).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetInstalledCertificatesResponseInner)obj);
        }

        /// <summary>
        /// Returns true if GetInstalledCertificatesResponseInner instances are equal
        /// </summary>
        /// <param name="other">Instance of GetInstalledCertificatesResponseInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetInstalledCertificatesResponseInner other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    InstallTime == other.InstallTime ||
                    InstallTime != null &&
                    InstallTime.Equals(other.InstallTime)
                ) && 
                (
                    IssuerName == other.IssuerName ||
                    IssuerName != null &&
                    IssuerName.Equals(other.IssuerName)
                ) && 
                (
                    Publickey == other.Publickey ||
                    Publickey != null &&
                    Publickey.Equals(other.Publickey)
                ) && 
                (
                    Serial == other.Serial ||
                    Serial != null &&
                    Serial.Equals(other.Serial)
                ) && 
                (
                    SubjectName == other.SubjectName ||
                    SubjectName != null &&
                    SubjectName.Equals(other.SubjectName)
                ) && 
                (
                    ValidityStart == other.ValidityStart ||
                    ValidityStart != null &&
                    ValidityStart.Equals(other.ValidityStart)
                ) && 
                (
                    ValidityEnd == other.ValidityEnd ||
                    ValidityEnd != null &&
                    ValidityEnd.Equals(other.ValidityEnd)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (InstallTime != null)
                    hashCode = hashCode * 59 + InstallTime.GetHashCode();
                    if (IssuerName != null)
                    hashCode = hashCode * 59 + IssuerName.GetHashCode();
                    if (Publickey != null)
                    hashCode = hashCode * 59 + Publickey.GetHashCode();
                    if (Serial != null)
                    hashCode = hashCode * 59 + Serial.GetHashCode();
                    if (SubjectName != null)
                    hashCode = hashCode * 59 + SubjectName.GetHashCode();
                    if (ValidityStart != null)
                    hashCode = hashCode * 59 + ValidityStart.GetHashCode();
                    if (ValidityEnd != null)
                    hashCode = hashCode * 59 + ValidityEnd.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetInstalledCertificatesResponseInner left, GetInstalledCertificatesResponseInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetInstalledCertificatesResponseInner left, GetInstalledCertificatesResponseInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RegistrationRegistrationFields : IEquatable<RegistrationRegistrationFields>
    { 
        /// <summary>
        /// header key:value (string type)
        /// </summary>
        /// <value>header key:value (string type)</value>

        [DataMember(Name="headers")]
        public Object Headers { get; set; }

        /// <summary>
        /// request payload object or string
        /// </summary>
        /// <value>request payload object or string</value>

        [DataMember(Name="payload")]
        public Object Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistrationRegistrationFields {\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RegistrationRegistrationFields)obj);
        }

        /// <summary>
        /// Returns true if RegistrationRegistrationFields instances are equal
        /// </summary>
        /// <param name="other">Instance of RegistrationRegistrationFields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationRegistrationFields other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Headers == other.Headers ||
                    Headers != null &&
                    Headers.Equals(other.Headers)
                ) && 
                (
                    Payload == other.Payload ||
                    Payload != null &&
                    Payload.Equals(other.Payload)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Headers != null)
                    hashCode = hashCode * 59 + Headers.GetHashCode();
                    if (Payload != null)
                    hashCode = hashCode * 59 + Payload.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RegistrationRegistrationFields left, RegistrationRegistrationFields right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RegistrationRegistrationFields left, RegistrationRegistrationFields right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

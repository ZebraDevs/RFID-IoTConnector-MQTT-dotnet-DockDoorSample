/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// System memory statistics
    /// </summary>
    [DataContract]
    public partial class MemoryStats : IEquatable<MemoryStats>
    { 
        /// <summary>
        /// Total RAM in bytes
        /// </summary>
        /// <value>Total RAM in bytes</value>
        [Required]

        [DataMember(Name="total")]
        public int? Total { get; set; }

        /// <summary>
        /// Free RAM in bytes
        /// </summary>
        /// <value>Free RAM in bytes</value>
        [Required]

        [DataMember(Name="free")]
        public int? Free { get; set; }

        /// <summary>
        /// Used RAM in bytes
        /// </summary>
        /// <value>Used RAM in bytes</value>
        [Required]

        [DataMember(Name="used")]
        public int? Used { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MemoryStats {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Free: ").Append(Free).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MemoryStats)obj);
        }

        /// <summary>
        /// Returns true if MemoryStats instances are equal
        /// </summary>
        /// <param name="other">Instance of MemoryStats to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MemoryStats other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                ) && 
                (
                    Free == other.Free ||
                    Free != null &&
                    Free.Equals(other.Free)
                ) && 
                (
                    Used == other.Used ||
                    Used != null &&
                    Used.Equals(other.Used)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    if (Free != null)
                    hashCode = hashCode * 59 + Free.GetHashCode();
                    if (Used != null)
                    hashCode = hashCode * 59 + Used.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MemoryStats left, MemoryStats right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MemoryStats left, MemoryStats right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

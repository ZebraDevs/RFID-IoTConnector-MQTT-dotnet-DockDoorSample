/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// Configuration of the Tag Data Events Interface
    /// </summary>
    [DataContract]
    public partial class DataV1 : IEquatable<DataV1>
    { 
        /// <summary>
        /// Gets or Sets _Event
        /// </summary>
        [Required]

        [DataMember(Name="event")]
        public EventV1 _Event { get; set; }

        /// <summary>
        /// Gets or Sets Retention
        /// </summary>

        [DataMember(Name="retention")]
        public DataV1Retention Retention { get; set; }

        /// <summary>
        /// Gets or Sets Batching
        /// </summary>

        [DataMember(Name="batching")]
        public DataV1Batching Batching { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataV1 {\n");
            sb.Append("  _Event: ").Append(_Event).Append("\n");
            sb.Append("  Retention: ").Append(Retention).Append("\n");
            sb.Append("  Batching: ").Append(Batching).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DataV1)obj);
        }

        /// <summary>
        /// Returns true if DataV1 instances are equal
        /// </summary>
        /// <param name="other">Instance of DataV1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataV1 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    _Event == other._Event ||
                    _Event != null &&
                    _Event.Equals(other._Event)
                ) && 
                (
                    Retention == other.Retention ||
                    Retention != null &&
                    Retention.Equals(other.Retention)
                ) && 
                (
                    Batching == other.Batching ||
                    Batching != null &&
                    Batching.Equals(other.Batching)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (_Event != null)
                    hashCode = hashCode * 59 + _Event.GetHashCode();
                    if (Retention != null)
                    hashCode = hashCode * 59 + Retention.GetHashCode();
                    if (Batching != null)
                    hashCode = hashCode * 59 + Batching.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DataV1 left, DataV1 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DataV1 left, DataV1 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// auto enrollment special tags:  {{hostname}}     : hostname  {{serialnumber}} : serial number  {{publickey}}    : publickey  {{csr}}          : CSR request  {{version}}      : current used registration version (0.0.0 &#x3D; not registered)
    /// </summary>
    [DataContract]
    public partial class Registration : IEquatable<Registration>
    { 
        /// <summary>
        /// Enrollment configuration version
        /// </summary>
        /// <value>Enrollment configuration version</value>
        [Required]

        [DataMember(Name="version")]
        public string Version { get; set; }

        /// <summary>
        /// Gets or Sets _Registration
        /// </summary>

        [DataMember(Name="registration")]
        public RegistrationRegistration _Registration { get; set; }

        /// <summary>
        /// Gets or Sets EndpointConfig
        /// </summary>

        [DataMember(Name="endpointConfig")]
        public CloudConfigV1 EndpointConfig { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Registration {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  _Registration: ").Append(_Registration).Append("\n");
            sb.Append("  EndpointConfig: ").Append(EndpointConfig).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Registration)obj);
        }

        /// <summary>
        /// Returns true if Registration instances are equal
        /// </summary>
        /// <param name="other">Instance of Registration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Registration other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                ) && 
                (
                    _Registration == other._Registration ||
                    _Registration != null &&
                    _Registration.Equals(other._Registration)
                ) && 
                (
                    EndpointConfig == other.EndpointConfig ||
                    EndpointConfig != null &&
                    EndpointConfig.Equals(other.EndpointConfig)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                    if (_Registration != null)
                    hashCode = hashCode * 59 + _Registration.GetHashCode();
                    if (EndpointConfig != null)
                    hashCode = hashCode * 59 + EndpointConfig.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Registration left, Registration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Registration left, Registration right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}

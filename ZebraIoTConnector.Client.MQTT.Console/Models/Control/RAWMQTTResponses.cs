/*
 * RAW MQTT Payloads
 *
 *  
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RAWMQTTResponses : IEquatable<RAWMQTTResponses>
    { 
        /// <summary>
        /// Gets or Sets Command
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CommandEnum
        {
            /// <summary>
            /// Enum GetVersionEnum for get_version
            /// </summary>
            [EnumMember(Value = "get_version")]
            GetVersionEnum = 0,
            /// <summary>
            /// Enum GetNetworkEnum for get_network
            /// </summary>
            [EnumMember(Value = "get_network")]
            GetNetworkEnum = 1,
            /// <summary>
            /// Enum SetNetworkEnum for set_network
            /// </summary>
            [EnumMember(Value = "set_network")]
            SetNetworkEnum = 2,
            /// <summary>
            /// Enum GetStatusEnum for get_status
            /// </summary>
            [EnumMember(Value = "get_status")]
            GetStatusEnum = 3,
            /// <summary>
            /// Enum RebootEnum for reboot
            /// </summary>
            [EnumMember(Value = "reboot")]
            RebootEnum = 4,
            /// <summary>
            /// Enum SetGpoEnum for set_gpo
            /// </summary>
            [EnumMember(Value = "set_gpo")]
            SetGpoEnum = 5,
            /// <summary>
            /// Enum GetAppledEnum for get_appled
            /// </summary>
            [EnumMember(Value = "get_appled")]
            GetAppledEnum = 6,
            /// <summary>
            /// Enum SetAppledEnum for set_appled
            /// </summary>
            [EnumMember(Value = "set_appled")]
            SetAppledEnum = 7,
            /// <summary>
            /// Enum GetRegionEnum for get_region
            /// </summary>
            [EnumMember(Value = "get_region")]
            GetRegionEnum = 8,
            /// <summary>
            /// Enum StartEnum for start
            /// </summary>
            [EnumMember(Value = "start")]
            StartEnum = 9,
            /// <summary>
            /// Enum StopEnum for stop
            /// </summary>
            [EnumMember(Value = "stop")]
            StopEnum = 10,
            /// <summary>
            /// Enum GetModeEnum for get_mode
            /// </summary>
            [EnumMember(Value = "get_mode")]
            GetModeEnum = 11,
            /// <summary>
            /// Enum SetModeEnum for set_mode
            /// </summary>
            [EnumMember(Value = "set_mode")]
            SetModeEnum = 12,
            /// <summary>
            /// Enum SetOsEnum for set_os
            /// </summary>
            [EnumMember(Value = "set_os")]
            SetOsEnum = 13,
            /// <summary>
            /// Enum GetConfigEnum for get_config
            /// </summary>
            [EnumMember(Value = "get_config")]
            GetConfigEnum = 14,
            /// <summary>
            /// Enum SetConfigEnum for set_config
            /// </summary>
            [EnumMember(Value = "set_config")]
            SetConfigEnum = 15,
            /// <summary>
            /// Enum GetLogsEnum for get_logs
            /// </summary>
            [EnumMember(Value = "get_logs")]
            GetLogsEnum = 16,
            /// <summary>
            /// Enum SetLogsEnum for set_logs
            /// </summary>
            [EnumMember(Value = "set_logs")]
            SetLogsEnum = 17,
            /// <summary>
            /// Enum GetLogsSyslogEnum for get_logs_syslog
            /// </summary>
            [EnumMember(Value = "get_logs_syslog")]
            GetLogsSyslogEnum = 18,
            /// <summary>
            /// Enum GetLogsRadioPacketLogEnum for get_logs_radioPacketLog
            /// </summary>
            [EnumMember(Value = "get_logs_radioPacketLog")]
            GetLogsRadioPacketLogEnum = 19,
            /// <summary>
            /// Enum DelLogsSyslogEnum for del_logs_syslog
            /// </summary>
            [EnumMember(Value = "del_logs_syslog")]
            DelLogsSyslogEnum = 20,
            /// <summary>
            /// Enum DelLogsRadioPacketLogEnum for del_logs_radioPacketLog
            /// </summary>
            [EnumMember(Value = "del_logs_radioPacketLog")]
            DelLogsRadioPacketLogEnum = 21,
            /// <summary>
            /// Enum GetLogsRgErrorLogEnum for get_logs_rgErrorLog
            /// </summary>
            [EnumMember(Value = "get_logs_rgErrorLog")]
            GetLogsRgErrorLogEnum = 22,
            /// <summary>
            /// Enum GetLogsRgWarningLogEnum for get_logs_rgWarningLog
            /// </summary>
            [EnumMember(Value = "get_logs_rgWarningLog")]
            GetLogsRgWarningLogEnum = 23,
            /// <summary>
            /// Enum GetLogsRcErrorLogEnum for get_logs_rcErrorLog
            /// </summary>
            [EnumMember(Value = "get_logs_rcErrorLog")]
            GetLogsRcErrorLogEnum = 24,
            /// <summary>
            /// Enum GetLogsRcWarningLogEnum for get_logs_rcWarningLog
            /// </summary>
            [EnumMember(Value = "get_logs_rcWarningLog")]
            GetLogsRcWarningLogEnum = 25,
            /// <summary>
            /// Enum GetLogsRcInfoLogEnum for get_logs_rcInfoLog
            /// </summary>
            [EnumMember(Value = "get_logs_rcInfoLog")]
            GetLogsRcInfoLogEnum = 26,
            /// <summary>
            /// Enum SetReqToUserappEnum for set_reqToUserapp
            /// </summary>
            [EnumMember(Value = "set_reqToUserapp")]
            SetReqToUserappEnum = 27,
            /// <summary>
            /// Enum SetInstallUserappEnum for set_installUserapp
            /// </summary>
            [EnumMember(Value = "set_installUserapp")]
            SetInstallUserappEnum = 28,
            /// <summary>
            /// Enum SetUninstallUserappEnum for set_uninstallUserapp
            /// </summary>
            [EnumMember(Value = "set_uninstallUserapp")]
            SetUninstallUserappEnum = 29,
            /// <summary>
            /// Enum SetStartUserappEnum for set_startUserapp
            /// </summary>
            [EnumMember(Value = "set_startUserapp")]
            SetStartUserappEnum = 30,
            /// <summary>
            /// Enum SetStopUserappEnum for set_stopUserapp
            /// </summary>
            [EnumMember(Value = "set_stopUserapp")]
            SetStopUserappEnum = 31,
            /// <summary>
            /// Enum SetAutostartUserappEnum for set_autostartUserapp
            /// </summary>
            [EnumMember(Value = "set_autostartUserapp")]
            SetAutostartUserappEnum = 32,
            /// <summary>
            /// Enum GetUserappsEnum for get_userapps
            /// </summary>
            [EnumMember(Value = "get_userapps")]
            GetUserappsEnum = 33,
            /// <summary>
            /// Enum GetCertificatesEnum for get_certificates
            /// </summary>
            [EnumMember(Value = "get_certificates")]
            GetCertificatesEnum = 34,
            /// <summary>
            /// Enum DelCertificateEnum for del_certificate
            /// </summary>
            [EnumMember(Value = "del_certificate")]
            DelCertificateEnum = 35,
            /// <summary>
            /// Enum SetUpdateCertificateEnum for set_updateCertificate
            /// </summary>
            [EnumMember(Value = "set_updateCertificate")]
            SetUpdateCertificateEnum = 36,
            /// <summary>
            /// Enum SetRefreshCertificateEnum for set_refreshCertificate
            /// </summary>
            [EnumMember(Value = "set_refreshCertificate")]
            SetRefreshCertificateEnum = 37,
            /// <summary>
            /// Enum SetRevertbackOSEnum for set_revertbackOS
            /// </summary>
            [EnumMember(Value = "set_revertbackOS")]
            SetRevertbackOSEnum = 38,
            /// <summary>
            /// Enum GetGpoStatusEnum for get_gpoStatus
            /// </summary>
            [EnumMember(Value = "get_gpoStatus")]
            GetGpoStatusEnum = 39,
            /// <summary>
            /// Enum GetGpiStatusEnum for get_gpiStatus
            /// </summary>
            [EnumMember(Value = "get_gpiStatus")]
            GetGpiStatusEnum = 40,
            /// <summary>
            /// Enum RegistrationEnum for registration
            /// </summary>
            [EnumMember(Value = "registration")]
            RegistrationEnum = 41        }

        /// <summary>
        /// Gets or Sets Command
        /// </summary>

        [DataMember(Name="command")]
        public string Command { get; set; }

        /// <summary>
        /// Gets or Sets CommandId
        /// </summary>

        [DataMember(Name="command_id")]
        public string CommandId { get; set; }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResponseEnum
        {
            /// <summary>
            /// Enum SuccessEnum for success
            /// </summary>
            [EnumMember(Value = "success")]
            SuccessEnum = 0,
            /// <summary>
            /// Enum FailureEnum for failure
            /// </summary>
            [EnumMember(Value = "failure")]
            FailureEnum = 1        }

        /// <summary>
        /// Gets or Sets Response
        /// </summary>

        [DataMember(Name="response")]
        public ResponseEnum? Response { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>

        [DataMember(Name="payload")]
        public OneOfRAWMQTTResponsesPayload Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RAWMQTTResponses {\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  CommandId: ").Append(CommandId).Append("\n");
            sb.Append("  Response: ").Append(Response).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RAWMQTTResponses)obj);
        }

        /// <summary>
        /// Returns true if RAWMQTTResponses instances are equal
        /// </summary>
        /// <param name="other">Instance of RAWMQTTResponses to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RAWMQTTResponses other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Command == other.Command ||
                    Command != null &&
                    Command.Equals(other.Command)
                ) && 
                (
                    CommandId == other.CommandId ||
                    CommandId != null &&
                    CommandId.Equals(other.CommandId)
                ) && 
                (
                    Response == other.Response ||
                    Response != null &&
                    Response.Equals(other.Response)
                ) && 
                (
                    Payload == other.Payload ||
                    Payload != null &&
                    Payload.Equals(other.Payload)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Command != null)
                    hashCode = hashCode * 59 + Command.GetHashCode();
                    if (CommandId != null)
                    hashCode = hashCode * 59 + CommandId.GetHashCode();
                    if (Response != null)
                    hashCode = hashCode * 59 + Response.GetHashCode();
                    if (Payload != null)
                    hashCode = hashCode * 59 + Payload.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RAWMQTTResponses left, RAWMQTTResponses right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RAWMQTTResponses left, RAWMQTTResponses right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
